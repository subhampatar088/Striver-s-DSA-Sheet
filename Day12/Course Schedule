class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<prerequisites.length;i++){
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = findIndegree(adj,numCourses);
        List<Integer> topoSort = new ArrayList<>();
        Queue<Integer> q = new ArrayDeque<>();
        for(int i=0;i<indegree.length;i++){
            if(indegree[i] == 0){
                q.offer(i);
            }
        }
        while(q.size() > 0){
            int curr = q.poll();
            topoSort.add(curr);
            for(int node : adj.get(curr)){
                indegree[node]--;
                if(indegree[node] == 0){
                    q.offer(node);
                }
            }
        }
        if(topoSort.size() == indegree.length) return true;
        return false;
    }
    int[] findIndegree(List<List<Integer>> adj,int n){
        int[] indegree = new int[n];
        for(int i=0;i<adj.size();i++){
            for(int j=0;j<adj.get(i).size();j++){
                indegree[adj.get(i).get(j)]++;
            }
        }
        return indegree;
    }
}
