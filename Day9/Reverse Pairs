class Solution {
    int count = 0;
    public int reversePairs(int[] nums) {
        mergeSort(nums,0,nums.length-1);
        return count;
    }
    void mergeSort(int[] nums,int l,int h){
        if(l<h){
            int mid = l+(h-l)/2;
            mergeSort(nums,l,mid);
            mergeSort(nums,mid+1,h);
            merge(nums,l,mid,h);
        }
    }
    void merge(int[] nums,int l,int mid,int h){
        int n1 = mid-l+1;
        int n2 = h-mid;
        int[] left = new int[n1];
        int[] right = new int[n2];
        for(int i=0;i<n1;i++){
            left[i] = nums[i+l]; 
        }
        for(int i=0;i<n2;i++){
            right[i] = nums[i+mid+1];
        }
        int i=0,j=0;
        while(i<n1){
            while(j<n2 && 1l*left[i] > 1l*2*right[j]){
                j++;
            }
            count += j;
            i++;
        }        
        i = 0;
        j = 0;
        int k = l;
        while(i<n1 && j<n2){
            if(left[i] <= right[j]){
                nums[k++] = left[i++];
            }
            else{
                nums[k++] = right[j++];
            }
        }
        while(i<n1){
            nums[k++] = left[i++];
        }
        while(j<n2){
            nums[k++] = right[j++];
        }
    }
}
