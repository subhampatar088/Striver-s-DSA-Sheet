import java.util.* ;
import java.io.*; 
public class Solution {
    static long count = 0;
    public static long getInversions(long arr[], int n) {
        mergeSort(arr,0,n-1);
        return count;
    }
    static void mergeSort(long arr[],int l,int h){
        if(l<h){
            int mid = l+(h-l)/2;
            mergeSort(arr,l,mid);
            mergeSort(arr,mid+1,h);
            merge(arr,l,mid,h);
        }
    }
    static void merge(long arr[],int l,int mid,int h){
        int n1 = mid-l+1;
        int n2 = h-mid;
        long[] left = new long[n1];
        long[] right = new long[n2];
        for(int i=0;i<n1;i++){
            left[i] = arr[i+l];
        }
        for(int i=0;i<n2;i++){
            right[i] = arr[mid+1+i];
        }
        int i=0,j=0,k=l;
        while(i<n1 && j<n2){
            if(left[i]<=right[j]){
                arr[k++] = left[i++];
            }
            else{
                count += n1-i;
                arr[k++] = right[j++];
            }
        }
        while(i<n1){
            arr[k++] = left[i++];
        }
        while(j<n2){
            arr[k++] = right[j++];
        }
    }
}
